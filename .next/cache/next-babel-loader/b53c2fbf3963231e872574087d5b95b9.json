{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nconst initialState = {\n  count: 0\n};\nconst userInitialState = {\n  username: 'jokcy'\n};\nconst ADD = 'ADD';\n\nfunction countReducer(state = initialState, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case ADD:\n      return {\n        count: state.count + (action.num || 1)\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst UPDATE_USERNAME = 'UPDATE_USERNAME';\n\nfunction userReducer(state = userInitialState, action) {\n  switch (action.type) {\n    case UPDATE_USERNAME:\n      return _objectSpread({}, state, {\n        username: action.name\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst allReducers = combineReducers({\n  counter: countReducer,\n  user: userReducer\n});\n/* const store = createStore(\r\n    allReducers, \r\n    {\r\n        counter: initialState,\r\n        user: userInitialState\r\n    },\r\n    composeWithDevTools(applyMiddleware(ReduxThunk)),\r\n) */\n//console.log(store.getState())\n//\n\nexport function add(num) {\n  return {\n    type: ADD,\n    num\n  };\n}\n\nfunction assAsync(num) {\n  return dispath => {\n    setTimeout(() => {\n      dispath(add(num));\n    }, 1000);\n  };\n}\n/* //store.dispatch({type: ADD})\r\nstore.dispatch(assAsync(5))\r\n//store.dispatch(add(2))\r\nstore.dispatch({type: UPDATE_USERNAME, name: 'Leilail'})\r\nconsole.log(store.getState())\r\n\r\nstore.subscribe(()=>{\r\n    console.log('chagned', store.getState())\r\n})\r\nstore.dispatch({type: ADD}) */\n\n\nexport default function initializeStore(state) {\n  const store = createStore(allReducers, Object.assign({}, {\n    counter: initialState,\n    user: userInitialState\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":{"version":3,"sources":["D:/react/nextjs-project/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","initialState","count","userInitialState","username","ADD","countReducer","state","action","console","log","type","num","UPDATE_USERNAME","userReducer","name","allReducers","counter","user","add","assAsync","dispath","setTimeout","initializeStore","store","Object","assign"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AADW,CAAzB;AAGA,MAAMC,GAAG,GAAG,KAAZ;;AAEA,SAASC,YAAT,CAAuBC,KAAK,GAAGN,YAA/B,EAA6CO,MAA7C,EAAqD;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,MAAnB;;AACA,UAAQA,MAAM,CAACG,IAAf;AACI,SAAKN,GAAL;AACI,aAAO;AAACH,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,IAAeM,MAAM,CAACI,GAAP,IAAc,CAA7B;AAAR,OAAP;;AACJ;AACI,aAAOL,KAAP;AAJR;AAMH;;AAED,MAAMM,eAAe,GAAG,iBAAxB;;AAEA,SAASC,WAAT,CAAqBP,KAAK,GAAGJ,gBAA7B,EAA+CK,MAA/C,EAAuD;AACnD,UAAQA,MAAM,CAACG,IAAf;AACI,SAAKE,eAAL;AACI,+BACON,KADP;AAEIH,QAAAA,QAAQ,EAAEI,MAAM,CAACO;AAFrB;;AAIA;AACI,aAAOR,KAAP;AAPZ;AASH;;AACD,MAAMS,WAAW,GAAGnB,eAAe,CAAC;AAChCoB,EAAAA,OAAO,EAAEX,YADuB;AAEhCY,EAAAA,IAAI,EAAEJ;AAF0B,CAAD,CAAnC;AAIA;;;;;;;;AAUA;AACA;;AACA,OAAO,SAASK,GAAT,CAAaP,GAAb,EAAkB;AACrB,SAAO;AACHD,IAAAA,IAAI,EAAEN,GADH;AAEHO,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASQ,QAAT,CAAmBR,GAAnB,EAAwB;AACpB,SAAQS,OAAD,IAAa;AAChBC,IAAAA,UAAU,CAAC,MAAI;AACXD,MAAAA,OAAO,CAACF,GAAG,CAACP,GAAD,CAAJ,CAAP;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAJD;AAKH;AAED;;;;;;;;;;;;AAYA,eAAe,SAASW,eAAT,CAA0BhB,KAA1B,EAAiC;AAC5C,QAAMiB,KAAK,GAAG5B,WAAW,CACrBoB,WADqB,EAErBS,MAAM,CAACC,MAAP,CACI,EADJ,EAEI;AACIT,IAAAA,OAAO,EAAEhB,YADb;AAEIiB,IAAAA,IAAI,EAAEf;AAFV,GAFJ,EAMII,KANJ,CAFqB,EAUrBP,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CAVE,CAAzB;AAYA,SAAOyB,KAAP;AACH","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport ReduxThunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nconst initialState = {\r\n    count: 0\r\n}\r\n\r\nconst userInitialState = {\r\n    username: 'jokcy'\r\n}\r\nconst ADD = 'ADD'\r\n\r\nfunction countReducer (state = initialState, action) {\r\n    console.log(state, action)\r\n    switch (action.type) {\r\n        case ADD: \r\n            return {count: state.count + (action.num || 1)}\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nconst UPDATE_USERNAME = 'UPDATE_USERNAME'\r\n\r\nfunction userReducer(state = userInitialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_USERNAME:\r\n            return {\r\n                ...state,\r\n                username: action.name\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\nconst allReducers = combineReducers({\r\n    counter: countReducer,\r\n    user: userReducer\r\n})\r\n/* const store = createStore(\r\n    allReducers, \r\n    {\r\n        counter: initialState,\r\n        user: userInitialState\r\n    },\r\n    composeWithDevTools(applyMiddleware(ReduxThunk)),\r\n) */\r\n\r\n\r\n//console.log(store.getState())\r\n//\r\nexport function add(num) {\r\n    return {\r\n        type: ADD,\r\n        num\r\n    }\r\n}\r\n\r\nfunction assAsync (num) {\r\n    return (dispath) => {\r\n        setTimeout(()=>{\r\n            dispath(add(num))\r\n        }, 1000)\r\n    }\r\n}\r\n\r\n/* //store.dispatch({type: ADD})\r\nstore.dispatch(assAsync(5))\r\n//store.dispatch(add(2))\r\nstore.dispatch({type: UPDATE_USERNAME, name: 'Leilail'})\r\nconsole.log(store.getState())\r\n\r\nstore.subscribe(()=>{\r\n    console.log('chagned', store.getState())\r\n})\r\nstore.dispatch({type: ADD}) */\r\n\r\n\r\nexport default function initializeStore (state) {\r\n    const store = createStore(\r\n        allReducers, \r\n        Object.assign(\r\n            {},\r\n            {\r\n                counter: initialState,\r\n                user: userInitialState\r\n            },\r\n            state,\r\n        ),\r\n        composeWithDevTools(applyMiddleware(ReduxThunk)),\r\n    )\r\n    return store\r\n}"]},"metadata":{},"sourceType":"module"}