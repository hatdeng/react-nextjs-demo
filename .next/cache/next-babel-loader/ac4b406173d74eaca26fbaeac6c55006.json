{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport React, { useState, useReducer, useContext, useLayoutEffect, useEffect, useRef } from 'react';\nimport MyContext from '../../lib/my-context';\n\nclass MyCount extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n\n    this.ref = React.createRef();\n  }\n\n  componentDidMount() {\n    //this.refs.abc\n    this.ref.current;\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"span\", {\n      ref: this.ref\n    }, \"test\"), this.state.count);\n  }\n\n}\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFunc() {\n  //const [count, setCount] = useState(0) // [a, b]\n  const {\n    0: count,\n    1: dispatchCount\n  } = useReducer(countReducer, 0);\n  const {\n    0: name,\n    1: setName\n  } = useState('Jokcy');\n  const context = useContext(MyContext);\n  const inputRef = useRef();\n  /* useEffect(()=>{\r\n      const interval = setInterval(()=>{\r\n          //setCount(c => c + 1)\r\n          dispatchCount(count, add)\r\n      }, 1000)\r\n        return ()=> clearInterval(interval)\r\n  }, []) */\n  // 会在属性更新后dom更新之后更新,更新HTML之后\n\n  useEffect(() => {\n    //console.log(\"effect ivvoked\")\n    console.log(inputRef.value);\n    return () => {\n      console.log('effect deteched');\n    };\n  }, [count]); // 会在属性更新后dom更新之前更新, 更新HTML之前\n\n  /* useLayoutEffect(()=>{\r\n      console.log(\"useLayoutEffect ivvoked\")\r\n      return ()=> {console.log('useLayoutEffect deteched')}\r\n  },[count]) */\n\n  return __jsx(React.Fragment, null, __jsx(\"input\", {\n    ref: inputRef,\n    value: name,\n    onChange: e => {\n      setName(e.target.value);\n    }\n  }), __jsx(\"button\", {\n    onClick: () => {\n      dispatchCount({\n        type: 'add'\n      });\n    }\n  }, count), __jsx(\"p\", null, context));\n}\n\nexport default MyCountFunc;\n/* export default ()=>{\r\n    return (\r\n        <>\r\n            This is page b\r\n        </>\r\n    )\r\n} */","map":{"version":3,"sources":["D:/react/nextjs-project/pages/test/b.js"],"names":["Head","React","useState","useReducer","useContext","useLayoutEffect","useEffect","useRef","MyContext","MyCount","Component","constructor","count","ref","createRef","componentDidMount","current","interval","setInterval","setState","state","componentWillUnmount","clearInterval","render","countReducer","action","type","MyCountFunc","dispatchCount","name","setName","context","inputRef","console","log","value","e","target"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,OAAOC,KAAP,IACIC,QADJ,EAEIC,UAFJ,EAGIC,UAHJ,EAIIC,eAJJ,EAKIC,SALJ,EAMIC,MANJ,QAOO,OAPP;AASA,OAAOC,SAAP,MAAsB,sBAAtB;;AAEA,MAAMC,OAAN,SAAsBR,KAAK,CAACS,SAA5B,CAAsC;AAClCC,EAAAA,WAAW,GAAE;AACT;;AADS,mCAIL;AACJC,MAAAA,KAAK,EAAE;AADH,KAJK;;AAET,SAAKC,GAAL,GAAWZ,KAAK,CAACa,SAAN,EAAX;AACH;;AAKDC,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKF,GAAL,CAASG,OAAT;AACA,SAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAI;AAC5B,WAAKC,QAAL,CAAc;AAACP,QAAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWR,KAAX,GAAmB;AAA3B,OAAd;AACH,KAF0B,EAExB,IAFwB,CAA3B;AAGH;;AACDS,EAAAA,oBAAoB,GAAI;AACpB,QAAG,KAAKJ,QAAR,EAAkB;AACdK,MAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACH;AACJ;;AACDM,EAAAA,MAAM,GAAI;AACN,WACI,4BACI;AAAM,MAAA,GAAG,EAAE,KAAKV;AAAhB,cADJ,EACqC,KAAKO,KAAL,CAAWR,KADhD,CADJ;AAKH;;AA3BiC;;AA8BtC,SAASY,YAAT,CAAuBJ,KAAvB,EAA8BK,MAA9B,EAAsC;AAClC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,KAAL;AACI,aAAON,KAAK,GAAG,CAAf;;AACJ,SAAK,OAAL;AACI,aAAOA,KAAK,GAAE,CAAd;;AACJ;AACA,aAAOA,KAAP;AANJ;AAQH;;AAED,SAASO,WAAT,GAAwB;AACpB;AAEA,QAAM;AAAA,OAACf,KAAD;AAAA,OAAQgB;AAAR,MAA0BzB,UAAU,CAACqB,YAAD,EAAe,CAAf,CAA1C;AACA,QAAM;AAAA,OAACK,IAAD;AAAA,OAAOC;AAAP,MAAkB5B,QAAQ,CAAC,OAAD,CAAhC;AAEA,QAAM6B,OAAO,GAAG3B,UAAU,CAACI,SAAD,CAA1B;AAEA,QAAMwB,QAAQ,GAAGzB,MAAM,EAAvB;AAEA;;;;;;;AAQC;;AACDD,EAAAA,SAAS,CAAC,MAAI;AACV;AACA2B,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,KAArB;AACA,WAAO,MAAK;AAACF,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAA+B,KAA5C;AACH,GAJQ,EAIP,CAACtB,KAAD,CAJO,CAAT,CAnBoB,CAwBpB;;AACA;;;;;AAMA,SACI,4BACI;AAAO,IAAA,GAAG,EAAEoB,QAAZ;AAAsB,IAAA,KAAK,EAAEH,IAA7B;AAAmC,IAAA,QAAQ,EAAGO,CAAD,IAAK;AAACN,MAAAA,OAAO,CAACM,CAAC,CAACC,MAAF,CAASF,KAAV,CAAP;AAAwB;AAA3E,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAE,MAAI;AAACP,MAAAA,aAAa,CAAC;AAACF,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAb;AAA6B;AAAnD,KAAsDd,KAAtD,CAFJ,EAII,iBAAImB,OAAJ,CAJJ,CADJ;AASH;;AAED,eAAeJ,WAAf;AAEA","sourcesContent":["import Head from 'next/head'\r\n\r\nimport React, { \r\n    useState, \r\n    useReducer, \r\n    useContext, \r\n    useLayoutEffect, \r\n    useEffect,\r\n    useRef\r\n} from 'react'\r\n\r\nimport MyContext from '../../lib/my-context'\r\n\r\nclass MyCount extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.ref = React.createRef()\r\n    }\r\n    state = {\r\n        count: 0\r\n    }\r\n\r\n    componentDidMount (){\r\n        //this.refs.abc\r\n        this.ref.current\r\n        this.interval = setInterval(()=>{\r\n            this.setState({count: this.state.count + 1 })\r\n        }, 1000)\r\n    }\r\n    componentWillUnmount () {\r\n        if(this.interval) {\r\n            clearInterval(this.interval)\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <>\r\n                <span ref={this.ref}>test</span>{this.state.count}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction countReducer (state, action) {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return state + 1\r\n        case 'minus':\r\n            return state -1\r\n        default: \r\n        return state\r\n    }\r\n}\r\n\r\nfunction MyCountFunc () {\r\n    //const [count, setCount] = useState(0) // [a, b]\r\n\r\n    const [count, dispatchCount ] = useReducer(countReducer, 0)\r\n    const [name, setName] = useState('Jokcy')\r\n\r\n    const context = useContext(MyContext)\r\n\r\n    const inputRef = useRef()\r\n\r\n    /* useEffect(()=>{\r\n        const interval = setInterval(()=>{\r\n            //setCount(c => c + 1)\r\n            dispatchCount(count, add)\r\n        }, 1000)\r\n\r\n        return ()=> clearInterval(interval)\r\n    }, []) */\r\n     // 会在属性更新后dom更新之后更新,更新HTML之后\r\n    useEffect(()=>{\r\n        //console.log(\"effect ivvoked\")\r\n        console.log(inputRef.value)\r\n        return ()=> {console.log('effect deteched')}\r\n    },[count])\r\n    // 会在属性更新后dom更新之前更新, 更新HTML之前\r\n    /* useLayoutEffect(()=>{\r\n        console.log(\"useLayoutEffect ivvoked\")\r\n        return ()=> {console.log('useLayoutEffect deteched')}\r\n    },[count]) */\r\n\r\n\r\n    return (\r\n        <>\r\n            <input ref={inputRef} value={name} onChange={(e)=>{setName(e.target.value)}} />\r\n            <button onClick={()=>{dispatchCount({type: 'add'})}}>{count}</button>\r\n\r\n            <p>{context}</p>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyCountFunc\r\n\r\n/* export default ()=>{\r\n    return (\r\n        <>\r\n            This is page b\r\n        </>\r\n    )\r\n} */"]},"metadata":{},"sourceType":"module"}