{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport React, { useState, useReducer, useContext, useLayoutEffect, useEffect } from 'react';\nimport MyContext from '../../lib/my-context';\n\nclass MyCount extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, this.state.count);\n  }\n\n}\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFunc() {\n  //const [count, setCount] = useState(0) // [a, b]\n  const {\n    0: count,\n    1: dispatchCount\n  } = useReducer(countReducer, 0);\n  const {\n    0: name,\n    1: setName\n  } = useState('Jokcy');\n  const context = useContext(MyContext);\n  /* useEffect(()=>{\r\n      const interval = setInterval(()=>{\r\n          //setCount(c => c + 1)\r\n          dispatchCount(count, add)\r\n      }, 1000)\r\n        return ()=> clearInterval(interval)\r\n  }, []) */\n  // 会在属性更新后dom更新之后更新,更新HTML之后\n\n  useEffect(() => {\n    console.log(\"effect ivvoked\");\n    return () => {\n      console.log('effect deteched');\n    };\n  }, [count]); // 会在属性更新后dom更新之前更新, 更新HTML之前\n\n  useLayoutEffect(() => {\n    console.log(\"useLayoutEffect ivvoked\");\n    return () => {\n      console.log('useLayoutEffect deteched');\n    };\n  }, [count]);\n  return __jsx(React.Fragment, null, __jsx(\"input\", {\n    value: name,\n    onChange: e => {\n      setName(e.target.value);\n    }\n  }), __jsx(\"button\", {\n    onClick: () => {\n      dispatchCount({\n        type: 'add'\n      });\n    }\n  }, count), __jsx(\"p\", null, context.value));\n}\n\nexport default MyCountFunc;\n/* export default ()=>{\r\n    return (\r\n        <>\r\n            This is page b\r\n        </>\r\n    )\r\n} */","map":{"version":3,"sources":["D:/react/nextjs-project/pages/test/b.js"],"names":["Head","React","useState","useReducer","useContext","useLayoutEffect","useEffect","MyContext","MyCount","Component","count","componentDidMount","interval","setInterval","setState","state","componentWillUnmount","clearInterval","render","countReducer","action","type","MyCountFunc","dispatchCount","name","setName","context","console","log","e","target","value"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,UAAtC,EAAkDC,eAAlD,EAAmEC,SAAnE,QAAoF,OAApF;AAEA,OAAOC,SAAP,MAAsB,sBAAtB;;AAEA,MAAMC,OAAN,SAAsBP,KAAK,CAACQ,SAA5B,CAAsC;AAAA;AAAA;;AAAA,mCAC1B;AACJC,MAAAA,KAAK,EAAE;AADH,KAD0B;AAAA;;AAKlCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAI;AAC5B,WAAKC,QAAL,CAAc;AAACJ,QAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWL,KAAX,GAAmB;AAA3B,OAAd;AACH,KAF0B,EAExB,IAFwB,CAA3B;AAGH;;AACDM,EAAAA,oBAAoB,GAAI;AACpB,QAAG,KAAKJ,QAAR,EAAkB;AACdK,MAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACH;AACJ;;AACDM,EAAAA,MAAM,GAAI;AACN,WACI,4BACK,KAAKH,KAAL,CAAWL,KADhB,CADJ;AAKH;;AArBiC;;AAwBtC,SAASS,YAAT,CAAuBJ,KAAvB,EAA8BK,MAA9B,EAAsC;AAClC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,KAAL;AACI,aAAON,KAAK,GAAG,CAAf;;AACJ,SAAK,OAAL;AACI,aAAOA,KAAK,GAAE,CAAd;;AACJ;AACA,aAAOA,KAAP;AANJ;AAQH;;AAED,SAASO,WAAT,GAAwB;AACpB;AAEA,QAAM;AAAA,OAACZ,KAAD;AAAA,OAAQa;AAAR,MAA0BpB,UAAU,CAACgB,YAAD,EAAe,CAAf,CAA1C;AACA,QAAM;AAAA,OAACK,IAAD;AAAA,OAAOC;AAAP,MAAkBvB,QAAQ,CAAC,OAAD,CAAhC;AAEA,QAAMwB,OAAO,GAAGtB,UAAU,CAACG,SAAD,CAA1B;AACA;;;;;;;AAQC;;AACDD,EAAAA,SAAS,CAAC,MAAI;AACVqB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAO,MAAK;AAACD,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAA+B,KAA5C;AACH,GAHQ,EAGP,CAAClB,KAAD,CAHO,CAAT,CAhBoB,CAoBpB;;AACAL,EAAAA,eAAe,CAAC,MAAI;AAChBsB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,WAAO,MAAK;AAACD,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAAwC,KAArD;AACH,GAHc,EAGb,CAAClB,KAAD,CAHa,CAAf;AAMA,SACI,4BACI;AAAO,IAAA,KAAK,EAAEc,IAAd;AAAoB,IAAA,QAAQ,EAAGK,CAAD,IAAK;AAACJ,MAAAA,OAAO,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AAAwB;AAA5D,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAE,MAAI;AAACR,MAAAA,aAAa,CAAC;AAACF,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAb;AAA6B;AAAnD,KAAsDX,KAAtD,CAFJ,EAII,iBAAIgB,OAAO,CAACK,KAAZ,CAJJ,CADJ;AASH;;AAED,eAAeT,WAAf;AAEA","sourcesContent":["import Head from 'next/head'\r\n\r\nimport React, { useState, useReducer, useContext, useLayoutEffect, useEffect } from 'react'\r\n\r\nimport MyContext from '../../lib/my-context'\r\n\r\nclass MyCount extends React.Component {\r\n    state = {\r\n        count: 0\r\n    }\r\n\r\n    componentDidMount (){\r\n        this.interval = setInterval(()=>{\r\n            this.setState({count: this.state.count + 1 })\r\n        }, 1000)\r\n    }\r\n    componentWillUnmount () {\r\n        if(this.interval) {\r\n            clearInterval(this.interval)\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <>\r\n                {this.state.count}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction countReducer (state, action) {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return state + 1\r\n        case 'minus':\r\n            return state -1\r\n        default: \r\n        return state\r\n    }\r\n}\r\n\r\nfunction MyCountFunc () {\r\n    //const [count, setCount] = useState(0) // [a, b]\r\n\r\n    const [count, dispatchCount ] = useReducer(countReducer, 0)\r\n    const [name, setName] = useState('Jokcy')\r\n\r\n    const context = useContext(MyContext)\r\n    /* useEffect(()=>{\r\n        const interval = setInterval(()=>{\r\n            //setCount(c => c + 1)\r\n            dispatchCount(count, add)\r\n        }, 1000)\r\n\r\n        return ()=> clearInterval(interval)\r\n    }, []) */\r\n     // 会在属性更新后dom更新之后更新,更新HTML之后\r\n    useEffect(()=>{\r\n        console.log(\"effect ivvoked\")\r\n        return ()=> {console.log('effect deteched')}\r\n    },[count])\r\n    // 会在属性更新后dom更新之前更新, 更新HTML之前\r\n    useLayoutEffect(()=>{\r\n        console.log(\"useLayoutEffect ivvoked\")\r\n        return ()=> {console.log('useLayoutEffect deteched')}\r\n    },[count])\r\n\r\n\r\n    return (\r\n        <>\r\n            <input value={name} onChange={(e)=>{setName(e.target.value)}} />\r\n            <button onClick={()=>{dispatchCount({type: 'add'})}}>{count}</button>\r\n\r\n            <p>{context.value}</p>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyCountFunc\r\n\r\n/* export default ()=>{\r\n    return (\r\n        <>\r\n            This is page b\r\n        </>\r\n    )\r\n} */"]},"metadata":{},"sourceType":"module"}