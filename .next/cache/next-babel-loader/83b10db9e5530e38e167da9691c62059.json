{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport React, { useState, useEffect } from 'react';\n\nclass MyCount extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, this.state.count);\n  }\n\n}\n\nfunction MyCountFunc() {\n  const {\n    0: count,\n    1: setCount\n  } = useState(0); // [a, b]\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(c = c + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return __jsx(React.Fragment, null, this.state.count);\n}\n\nexport default MyCount;\n/* export default ()=>{\r\n    return (\r\n        <>\r\n            This is page b\r\n        </>\r\n    )\r\n} */","map":{"version":3,"sources":["D:/react/nextjs-project/pages/test/b.js"],"names":["Head","React","useState","useEffect","MyCount","Component","count","componentDidMount","interval","setInterval","setState","state","componentWillUnmount","clearInterval","render","MyCountFunc","setCount","c"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,OAAN,SAAsBH,KAAK,CAACI,SAA5B,CAAsC;AAAA;AAAA;;AAAA,mCAC1B;AACJC,MAAAA,KAAK,EAAE;AADH,KAD0B;AAAA;;AAKlCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAI;AAC5B,WAAKC,QAAL,CAAc;AAACJ,QAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWL,KAAX,GAAmB;AAA3B,OAAd;AACH,KAF0B,EAExB,IAFwB,CAA3B;AAGH;;AACDM,EAAAA,oBAAoB,GAAI;AACpB,QAAG,KAAKJ,QAAR,EAAkB;AACdK,MAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACH;AACJ;;AACDM,EAAAA,MAAM,GAAI;AACN,WACI,4BACK,KAAKH,KAAL,CAAWL,KADhB,CADJ;AAKH;;AArBiC;;AAwBtC,SAASS,WAAT,GAAwB;AACpB,QAAM;AAAA,OAACT,KAAD;AAAA,OAAQU;AAAR,MAAoBd,QAAQ,CAAC,CAAD,CAAlC,CADoB,CACkB;;AAEtCC,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMK,QAAQ,GAAGC,WAAW,CAAC,MAAI;AAC7BO,MAAAA,QAAQ,CAACC,CAAC,GAAGA,CAAC,GAAG,CAAT,CAAR;AACH,KAF2B,EAEzB,IAFyB,CAA5B;AAIA,WAAO,MAAKJ,aAAa,CAACL,QAAD,CAAzB;AACH,GANQ,EAMN,EANM,CAAT;AAOA,SACI,4BACK,KAAKG,KAAL,CAAWL,KADhB,CADJ;AAKH;;AAED,eAAeF,OAAf;AAEA","sourcesContent":["import Head from 'next/head'\r\n\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nclass MyCount extends React.Component {\r\n    state = {\r\n        count: 0\r\n    }\r\n\r\n    componentDidMount (){\r\n        this.interval = setInterval(()=>{\r\n            this.setState({count: this.state.count + 1 })\r\n        }, 1000)\r\n    }\r\n    componentWillUnmount () {\r\n        if(this.interval) {\r\n            clearInterval(this.interval)\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <>\r\n                {this.state.count}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction MyCountFunc () {\r\n    const [count, setCount] = useState(0) // [a, b]\r\n\r\n    useEffect(()=>{\r\n        const interval = setInterval(()=>{\r\n            setCount(c = c + 1)\r\n        }, 1000)\r\n\r\n        return ()=> clearInterval(interval)\r\n    }, [])\r\n    return (\r\n        <>\r\n            {this.state.count}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyCount\r\n\r\n/* export default ()=>{\r\n    return (\r\n        <>\r\n            This is page b\r\n        </>\r\n    )\r\n} */"]},"metadata":{},"sourceType":"module"}