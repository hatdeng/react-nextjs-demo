{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState, useReducer, useContext, useLayoutEffect, useEffect, useRef } from 'react';\nimport MyContext from '../../lib/my-context';\n\nvar MyCount =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MyCount, _React$Component);\n\n  function MyCount() {\n    var _this;\n\n    _classCallCheck(this, MyCount);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyCount).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      count: 0\n    });\n\n    _this.ref = React.createRef();\n    return _this;\n  }\n\n  _createClass(MyCount, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //this.refs.abc\n      this.ref.current;\n      this.interval = setInterval(function () {\n        _this2.setState({\n          count: _this2.state.count + 1\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, __jsx(\"span\", {\n        ref: this.ref\n      }, \"test\"), this.state.count);\n    }\n  }]);\n\n  return MyCount;\n}(React.Component);\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFunc() {\n  var _useReducer = useReducer(countReducer, 0),\n      count = _useReducer[0],\n      dispatchCount = _useReducer[1];\n\n  var _useState = useState('Jokcy'),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var config = {\n    text: \"Count is \".concat(count),\n    color: count > 3 ? 'red' : 'blue'\n  };\n  return __jsx(React.Fragment, null, __jsx(\"input\", {\n    value: name,\n    onChange: function onChange(e) {\n      setName(e.target.value);\n    }\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      dispatchCount({\n        type: 'add'\n      });\n    }\n  }, count), __jsx(Child, {\n    config: config,\n    onButtonClick: function onButtonClick() {\n      return dispatchCount({\n        type: 'add'\n      });\n    }\n  }));\n}\n\nfunction Child(_ref) {\n  var onButtonClick = _ref.onButtonClick,\n      config = _ref.config;\n  console.log('child render');\n  return __jsx(\"button\", {\n    onClick: onButtonClick,\n    style: {\n      color: config.color\n    }\n  }, config.text);\n}\n\nexport default MyCountFunc;","map":{"version":3,"sources":["D:/react/nextjs-project/pages/test/b.js"],"names":["Head","React","useState","useReducer","useContext","useLayoutEffect","useEffect","useRef","MyContext","MyCount","count","ref","createRef","current","interval","setInterval","setState","state","clearInterval","Component","countReducer","action","type","MyCountFunc","dispatchCount","name","setName","config","text","color","e","target","value","Child","onButtonClick","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,OAAOC,KAAP,IACIC,QADJ,EAEIC,UAFJ,EAGIC,UAHJ,EAIIC,eAJJ,EAKIC,SALJ,EAMIC,MANJ,QAOO,OAPP;AASA,OAAOC,SAAP,MAAsB,sBAAtB;;IAEMC,O;;;;;AACF,qBAAa;AAAA;;AAAA;;AACT;;AADS,4DAIL;AACJC,MAAAA,KAAK,EAAE;AADH,KAJK;;AAET,UAAKC,GAAL,GAAWV,KAAK,CAACW,SAAN,EAAX;AAFS;AAGZ;;;;wCAKmB;AAAA;;AAChB;AACA,WAAKD,GAAL,CAASE,OAAT;AACA,WAAKC,QAAL,GAAgBC,WAAW,CAAC,YAAI;AAC5B,QAAA,MAAI,CAACC,QAAL,CAAc;AAACN,UAAAA,KAAK,EAAE,MAAI,CAACO,KAAL,CAAWP,KAAX,GAAmB;AAA3B,SAAd;AACH,OAF0B,EAExB,IAFwB,CAA3B;AAGH;;;2CACuB;AACpB,UAAG,KAAKI,QAAR,EAAkB;AACdI,QAAAA,aAAa,CAAC,KAAKJ,QAAN,CAAb;AACH;AACJ;;;6BACS;AACN,aACI,4BACI;AAAM,QAAA,GAAG,EAAE,KAAKH;AAAhB,gBADJ,EACqC,KAAKM,KAAL,CAAWP,KADhD,CADJ;AAKH;;;;EA3BiBT,KAAK,CAACkB,S;;AA8B5B,SAASC,YAAT,CAAuBH,KAAvB,EAA8BI,MAA9B,EAAsC;AAClC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,KAAL;AACI,aAAOL,KAAK,GAAG,CAAf;;AACJ,SAAK,OAAL;AACI,aAAOA,KAAK,GAAE,CAAd;;AACJ;AACA,aAAOA,KAAP;AANJ;AAQH;;AAED,SAASM,WAAT,GAAwB;AAAA,oBAEYpB,UAAU,CAACiB,YAAD,EAAe,CAAf,CAFtB;AAAA,MAEbV,KAFa;AAAA,MAENc,aAFM;;AAAA,kBAGItB,QAAQ,CAAC,OAAD,CAHZ;AAAA,MAGbuB,IAHa;AAAA,MAGPC,OAHO;;AAKpB,MAAMC,MAAM,GAAG;AACXC,IAAAA,IAAI,qBAAclB,KAAd,CADO;AAEXmB,IAAAA,KAAK,EAAEnB,KAAK,GAAG,CAAR,GAAY,KAAZ,GAAoB;AAFhB,GAAf;AAOA,SACI,4BACI;AAAO,IAAA,KAAK,EAAEe,IAAd;AAAoB,IAAA,QAAQ,EAAE,kBAACK,CAAD,EAAK;AAACJ,MAAAA,OAAO,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AAAwB;AAA5D,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAE,mBAAI;AAACR,MAAAA,aAAa,CAAC;AAACF,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAb;AAA6B;AAAnD,KAAsDZ,KAAtD,CAFJ,EAIG,MAAC,KAAD;AACC,IAAA,MAAM,EAAEiB,MADT;AAEC,IAAA,aAAa,EAAE;AAAA,aAAKH,aAAa,CAAC;AAACF,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAlB;AAAA;AAFhB,IAJH,CADJ;AAYH;;AAED,SAASW,KAAT,OAA0C;AAAA,MAAzBC,aAAyB,QAAzBA,aAAyB;AAAA,MAAVP,MAAU,QAAVA,MAAU;AACtCQ,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SACI;AAAQ,IAAA,OAAO,EAAEF,aAAjB;AAAgC,IAAA,KAAK,EAAE;AAAEL,MAAAA,KAAK,EAAEF,MAAM,CAACE;AAAhB;AAAvC,KAAiEF,MAAM,CAACC,IAAxE,CADJ;AAGH;;AAED,eAAeL,WAAf","sourcesContent":["import Head from 'next/head'\r\n\r\nimport React, { \r\n    useState, \r\n    useReducer, \r\n    useContext, \r\n    useLayoutEffect, \r\n    useEffect,\r\n    useRef\r\n} from 'react'\r\n\r\nimport MyContext from '../../lib/my-context'\r\n\r\nclass MyCount extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.ref = React.createRef()\r\n    }\r\n    state = {\r\n        count: 0\r\n    }\r\n\r\n    componentDidMount (){\r\n        //this.refs.abc\r\n        this.ref.current\r\n        this.interval = setInterval(()=>{\r\n            this.setState({count: this.state.count + 1 })\r\n        }, 1000)\r\n    }\r\n    componentWillUnmount () {\r\n        if(this.interval) {\r\n            clearInterval(this.interval)\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <>\r\n                <span ref={this.ref}>test</span>{this.state.count}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction countReducer (state, action) {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return state + 1\r\n        case 'minus':\r\n            return state -1\r\n        default: \r\n        return state\r\n    }\r\n}\r\n\r\nfunction MyCountFunc () {\r\n\r\n    const [count, dispatchCount ] = useReducer(countReducer, 0)\r\n    const [name, setName] = useState('Jokcy')\r\n\r\n    const config = {\r\n        text: `Count is ${count}`,\r\n        color: count > 3 ? 'red' : 'blue'\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <input value={name} onChange={(e)=>{setName(e.target.value)}} />\r\n            <button onClick={()=>{dispatchCount({type: 'add'})}}>{count}</button>\r\n\r\n           <Child \r\n            config={config}\r\n            onButtonClick={()=> dispatchCount({type: 'add'})}\r\n            />\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nfunction Child({ onButtonClick, config }) {\r\n    console.log('child render')\r\n    return (\r\n        <button onClick={onButtonClick} style={{ color: config.color }}>{config.text}</button>\r\n    )\r\n}\r\n\r\nexport default MyCountFunc\r\n\r\n"]},"metadata":{},"sourceType":"module"}