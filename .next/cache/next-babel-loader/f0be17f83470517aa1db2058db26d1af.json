{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers } from 'redux';\nconst initialState = {\n  count: 0\n};\nconst userInitialState = {\n  username: 'jokcy'\n};\nconst ADD = 'ADD';\n\nfunction countReducer(state = initialState, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case ADD:\n      return {\n        count: state.count + 1\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst UPDATE_USERNAME = 'UPDATE_USERNAME';\n\nfunction userReducer(state = userInitialState, action) {\n  switch (action.type) {\n    case UPDATE_USERNAME:\n      return _objectSpread({}, state, {\n        username: action.name\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst allReducers = combineReducers({\n  counter: countReducer,\n  user: countReducer\n});\nconst store = createStore(allReducers, initialState);\nconsole.log(store.getState());\nstore.dispatch({\n  type: ADD\n});\nconsole.log(store.getState());\nstore.subscribe(() => {\n  console.log('chagned', store.getState());\n});\nstore.dispatch({\n  type: ADD\n});\nexport default store;","map":{"version":3,"sources":["D:/react/nextjs-project/store/store.js"],"names":["createStore","combineReducers","initialState","count","userInitialState","username","ADD","countReducer","state","action","console","log","type","UPDATE_USERNAME","userReducer","name","allReducers","counter","user","store","getState","dispatch","subscribe"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AADW,CAAzB;AAGA,MAAMC,GAAG,GAAG,KAAZ;;AAEA,SAASC,YAAT,CAAuBC,KAAK,GAAGN,YAA/B,EAA6CO,MAA7C,EAAqD;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,MAAnB;;AACA,UAAQA,MAAM,CAACG,IAAf;AACI,SAAKN,GAAL;AACA,aAAO;AAACH,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,GAAc;AAAtB,OAAP;;AACA;AACA,aAAOK,KAAP;AAJJ;AAMH;;AAED,MAAMK,eAAe,GAAG,iBAAxB;;AAEA,SAASC,WAAT,CAAqBN,KAAK,GAAGJ,gBAA7B,EAA+CK,MAA/C,EAAuD;AACnD,UAAQA,MAAM,CAACG,IAAf;AACI,SAAKC,eAAL;AACI,+BACOL,KADP;AAEIH,QAAAA,QAAQ,EAAEI,MAAM,CAACM;AAFrB;;AAIA;AACI,aAAOP,KAAP;AAPZ;AASH;;AACD,MAAMQ,WAAW,GAAGf,eAAe,CAAC;AAChCgB,EAAAA,OAAO,EAAEV,YADuB;AAEhCW,EAAAA,IAAI,EAAEX;AAF0B,CAAD,CAAnC;AAIA,MAAMY,KAAK,GAAGnB,WAAW,CAACgB,WAAD,EAAcd,YAAd,CAAzB;AAGAQ,OAAO,CAACC,GAAR,CAAYQ,KAAK,CAACC,QAAN,EAAZ;AAEAD,KAAK,CAACE,QAAN,CAAe;AAACT,EAAAA,IAAI,EAAEN;AAAP,CAAf;AACAI,OAAO,CAACC,GAAR,CAAYQ,KAAK,CAACC,QAAN,EAAZ;AAEAD,KAAK,CAACG,SAAN,CAAgB,MAAI;AAChBZ,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,KAAK,CAACC,QAAN,EAAvB;AACH,CAFD;AAGAD,KAAK,CAACE,QAAN,CAAe;AAACT,EAAAA,IAAI,EAAEN;AAAP,CAAf;AACA,eAAea,KAAf","sourcesContent":["import { createStore, combineReducers } from 'redux'\r\n\r\nconst initialState = {\r\n    count: 0\r\n}\r\n\r\nconst userInitialState = {\r\n    username: 'jokcy'\r\n}\r\nconst ADD = 'ADD'\r\n\r\nfunction countReducer (state = initialState, action) {\r\n    console.log(state, action)\r\n    switch (action.type) {\r\n        case ADD: \r\n        return {count: state.count + 1}\r\n        default: \r\n        return state\r\n    }\r\n}\r\n\r\nconst UPDATE_USERNAME = 'UPDATE_USERNAME'\r\n\r\nfunction userReducer(state = userInitialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_USERNAME:\r\n            return {\r\n                ...state,\r\n                username: action.name\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\nconst allReducers = combineReducers({\r\n    counter: countReducer,\r\n    user: countReducer\r\n})\r\nconst store = createStore(allReducers, initialState)\r\n\r\n\r\nconsole.log(store.getState())\r\n\r\nstore.dispatch({type: ADD})\r\nconsole.log(store.getState())\r\n\r\nstore.subscribe(()=>{\r\n    console.log('chagned', store.getState())\r\n})\r\nstore.dispatch({type: ADD})\r\nexport default store"]},"metadata":{},"sourceType":"module"}