{"ast":null,"code":"var __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState, useReducer, useContext, useLayoutEffect, useEffect, useRef, memo, useMemo, useCallback } from 'react';\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFunc() {\n  const {\n    0: count,\n    1: dispatchCount\n  } = useReducer(countReducer, 0);\n  const {\n    0: name,\n    1: setName\n  } = useState('Jokcy');\n  const countRef = useRef();\n  const config = useMemo(() => ({\n    text: `Count is ${count}`,\n    color: count > 3 ? 'red' : 'blue'\n  }), [count]);\n  /* const handleButtonClick = useCallback(\r\n      () =>  dispatchCount({ type: 'add' }),\r\n      []\r\n  ) */\n\n  const handleButtonClick = useMemo(() => () => dispatchCount({\n    type: 'add'\n  }), []);\n\n  const handleAlterButtonClick = function () {\n    setTimeout(() => {\n      alert(count);\n    }, 2000);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"input\", {\n    value: name,\n    onChange: e => {\n      setName(e.target.value);\n    }\n  }), __jsx(Child, {\n    config: config,\n    onButtonClick: handleButtonClick\n  }), __jsx(\"button\", {\n    onClick: handleAlterButtonClick\n  }, \"This is Alert count\"));\n}\n\nconst Child = memo(function Child({\n  onButtonClick,\n  config\n}) {\n  console.log('child render');\n  return __jsx(\"button\", {\n    onClick: onButtonClick,\n    style: {\n      color: config.color\n    }\n  }, config.text);\n});\nexport default MyCountFunc;","map":{"version":3,"sources":["D:/react/nextjs-project/pages/test/b.js"],"names":["Head","React","useState","useReducer","useContext","useLayoutEffect","useEffect","useRef","memo","useMemo","useCallback","countReducer","state","action","type","MyCountFunc","count","dispatchCount","name","setName","countRef","config","text","color","handleButtonClick","handleAlterButtonClick","setTimeout","alert","e","target","value","Child","onButtonClick","console","log"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,OAAOC,KAAP,IACIC,QADJ,EAEIC,UAFJ,EAGIC,UAHJ,EAIIC,eAJJ,EAKIC,SALJ,EAMIC,MANJ,EAOIC,IAPJ,EAQIC,OARJ,EASIC,WATJ,QAUO,OAVP;;AAcA,SAASC,YAAT,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AAClC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,KAAL;AACI,aAAOF,KAAK,GAAG,CAAf;;AACJ,SAAK,OAAL;AACI,aAAOA,KAAK,GAAE,CAAd;;AACJ;AACA,aAAOA,KAAP;AANJ;AAQH;;AAED,SAASG,WAAT,GAAwB;AAEpB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAA0Bd,UAAU,CAACQ,YAAD,EAAe,CAAf,CAA1C;AACA,QAAM;AAAA,OAACO,IAAD;AAAA,OAAOC;AAAP,MAAkBjB,QAAQ,CAAC,OAAD,CAAhC;AAEA,QAAMkB,QAAQ,GAAGb,MAAM,EAAvB;AAEA,QAAMc,MAAM,GAAGZ,OAAO,CAAC,OAAK;AACxBa,IAAAA,IAAI,EAAG,YAAWN,KAAM,EADA;AAExBO,IAAAA,KAAK,EAAEP,KAAK,GAAG,CAAR,GAAY,KAAZ,GAAoB;AAFH,GAAL,CAAD,EAGlB,CAACA,KAAD,CAHkB,CAAtB;AAKA;;;;;AAIA,QAAMQ,iBAAiB,GAAGf,OAAO,CAC7B,MAAK,MAAOQ,aAAa,CAAC;AAAEH,IAAAA,IAAI,EAAE;AAAR,GAAD,CADI,EAE7B,EAF6B,CAAjC;;AAKA,QAAMW,sBAAsB,GAAG,YAAW;AACtCC,IAAAA,UAAU,CAAC,MAAI;AACXC,MAAAA,KAAK,CAACX,KAAD,CAAL;AACH,KAFS,EAGV,IAHU,CAAV;AAIH,GALD;;AAOA,SACI,4BACI;AAAO,IAAA,KAAK,EAAEE,IAAd;AAAoB,IAAA,QAAQ,EAAGU,CAAD,IAAK;AAACT,MAAAA,OAAO,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AAAwB;AAA5D,IADJ,EAGG,MAAC,KAAD;AACC,IAAA,MAAM,EAAET,MADT;AAEC,IAAA,aAAa,EAAEG;AAFhB,IAHH,EAOI;AAAQ,IAAA,OAAO,EAAEC;AAAjB,2BAPJ,CADJ;AAWH;;AAED,MAAMM,KAAK,GAAGvB,IAAI,CAAC,SAASuB,KAAT,CAAe;AAAEC,EAAAA,aAAF;AAAiBX,EAAAA;AAAjB,CAAf,EAA0C;AACzDY,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SACI;AAAQ,IAAA,OAAO,EAAEF,aAAjB;AAAgC,IAAA,KAAK,EAAE;AAAET,MAAAA,KAAK,EAAEF,MAAM,CAACE;AAAhB;AAAvC,KAAiEF,MAAM,CAACC,IAAxE,CADJ;AAGH,CALiB,CAAlB;AAOA,eAAeP,WAAf","sourcesContent":["import Head from 'next/head'\r\n\r\nimport React, { \r\n    useState, \r\n    useReducer, \r\n    useContext, \r\n    useLayoutEffect, \r\n    useEffect,\r\n    useRef,\r\n    memo,\r\n    useMemo,\r\n    useCallback\r\n} from 'react'\r\n\r\n\r\n\r\nfunction countReducer (state, action) {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return state + 1\r\n        case 'minus':\r\n            return state -1\r\n        default: \r\n        return state\r\n    }\r\n}\r\n\r\nfunction MyCountFunc () {\r\n\r\n    const [count, dispatchCount ] = useReducer(countReducer, 0)\r\n    const [name, setName] = useState('Jokcy')\r\n\r\n    const countRef = useRef()\r\n\r\n    const config = useMemo(()=>({\r\n        text: `Count is ${count}`,\r\n        color: count > 3 ? 'red' : 'blue'\r\n    }), [count])\r\n\r\n    /* const handleButtonClick = useCallback(\r\n        () =>  dispatchCount({ type: 'add' }),\r\n        []\r\n    ) */\r\n    const handleButtonClick = useMemo(\r\n        ()=> () =>  dispatchCount({ type: 'add' }),\r\n        []\r\n    )\r\n\r\n    const handleAlterButtonClick = function (){\r\n        setTimeout(()=>{\r\n            alert(count)\r\n        },\r\n        2000)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input value={name} onChange={(e)=>{setName(e.target.value)}} />\r\n\r\n           <Child \r\n            config={config}\r\n            onButtonClick={handleButtonClick}\r\n            />\r\n            <button onClick={handleAlterButtonClick}>This is Alert count</button>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Child = memo(function Child({ onButtonClick, config }) {\r\n    console.log('child render')\r\n    return (\r\n        <button onClick={onButtonClick} style={{ color: config.color }}>{config.text}</button>\r\n    )\r\n})\r\n\r\nexport default MyCountFunc\r\n\r\n"]},"metadata":{},"sourceType":"module"}